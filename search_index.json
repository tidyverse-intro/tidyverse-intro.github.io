[
["index.html", "A gRadual intRoduction to the tidyverse Prerequisites", " A gRadual intRoduction to the tidyverse Chester Ismay and Ted Laderas 2017-07-20 Prerequisites Audience: Beginner to Intermediate R Users This book replicates the materials developed for a workshop for the Cascadia-R conference meant to be a gentle introduction to the tidyverse for data wrangling and visualization. What You’ll Learn Part 1 - Aesthetics and ggplot2 Part 2 - Factors and ggplot2 Part 3 - Manipulating Data using dplyr Part 4 - The Whys and Hows of Tidy Data using tidyr Part 5 - More on factors with forcats Before We Get Started Before continuing, please make sure that R and RStudio are installed on your laptop. (You should have version 3.3 or higher for R and version 1.0 or higher of RStudio.) Then install the tidyverse, gapminder, fivethirtyeight, and rmarkdown packages from CRAN using the following command: install.packages(c(&quot;tidyverse&quot;, &quot;gapminder&quot;, &quot;fivethirtyeight&quot;, &quot;rmarkdown&quot;)) "],
["1-ggplot2.html", "1 The gRammar of gRaphics with ggplot2 1.1 The Grammar of Graphics 1.2 Back to basics 1.3 Your Task", " 1 The gRammar of gRaphics with ggplot2 In this section, we’ll discuss the Grammar of Graphics developed by Leland Wilkinson and implemented in R via Hadley Wickham. We’ll see how this is applied to a scatterplot with and without a regression line. These ideas will then be extended in Part 2 of the workshop. 1.1 The Grammar of Graphics What are the variables here? What is the observational unit? i.e., what is the THING being measured? How are the variables mapped to aesthetics? What is a statistical graphic? A mapping of data variables to aes()thetic attributes of geom_etric objects. 1.2 Back to basics Consider the following data in tidy format: simple_ex &lt;- data_frame( A = c(1980, 1990, 2000, 2010), B = c(1, 2, 4, 5), C = c(3, 2, 1, 2), D = c(&quot;low&quot;, &quot;low&quot;, &quot;high&quot;, &quot;high&quot;) ) simple_ex Sketch the graphics below on paper, where the x-axis is variable A and the y-axis is variable B A scatterplot A scatterplot with fitted least-squares regression line Intermediate folks: A scatter plot where the color of the points corresponds to D and the size of the points corresponds to C Only show a regression line of color “goldenrod” (no points and also no error bounds) A scatterplot ggplot(data = simple_ex, mapping = aes(x = A, y = B)) + geom_point() A scatterplot with fitted least-squares regression line ggplot(data = simple_ex, mapping = aes(x = A, y = B)) + geom_point() + geom_smooth(method = &quot;lm&quot;) Intermediate A scatter plot where the color of the points corresponds to D and the size of the points corresponds to C ggplot(data = simple_ex, mapping = aes(x = A, y = B)) + geom_point(mapping = aes(color = D, size = C)) Only show a regression line of color “goldenrod” (no points and also no error bounds) ggplot(data = simple_ex, mapping = aes(x = A, y = B)) + geom_smooth(method = &quot;lm&quot;, se = FALSE, color = &quot;goldenrod&quot;) 1.3 Your Task Recreate the gapminder plot shown at the beginning of this workshop (and below) using ggplot2 and the gapminder data frame in the gapminder package. The Data Visualization Cheat Sheet from RStudio may be helpful. Note: To focus on only the rows in the data frame corresponding to 1992 we use the filter function from dplyr that we will discuss in Part 3 of this workshop/book. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJsaWJyYXJ5KGdhcG1pbmRlcilcbmxpYnJhcnkoZHBseXIpXG5saWJyYXJ5KGdncGxvdDIpXG5nYXAxOTkyIDwtIGdhcG1pbmRlciAlPiUgZmlsdGVyKHllYXIgPT0gMTk5MilcblxuI1NwYWNlIGZvciB5b3VyIGFuc3dlciBoZXJlLiIsInNvbHV0aW9uIjoibGlicmFyeShnYXBtaW5kZXIpXG5saWJyYXJ5KGRwbHlyKVxubGlicmFyeShnZ3Bsb3QyKVxuZ2FwMTk5MiA8LSBnYXBtaW5kZXIgJT4lIGZpbHRlcih5ZWFyID09IDE5OTIpXG5nZ3Bsb3QoZGF0YSA9IGdhcDE5OTIsXG4gICAgICAgbWFwcGluZyA9IGFlcyh4ID0gbG9nKGdkcFBlcmNhcCwgYmFzZSA9IDEwKSwgXG4gICAgICAgICAgICAgICAgICAgICB5ID0gbGlmZUV4cCwgXG4gICAgICAgICAgICAgICAgICAgICBjb2xvciA9IGNvbnRpbmVudCxcbiAgICAgICAgICAgICAgICAgICAgIHNpemUgPSBwb3ApKSArXG4gIGdlb21fcG9pbnQoKSArIFxuICB4bGFiKFwiR3Jvc3MgRG9tZXN0aWMgUHJvZHVjdCAobG9nIHNjYWxlKVwiKSArIFxuICB5bGFiKFwiTGlmZSBFeHBlY3RhbmN5IGF0IGJpcnRoICh5ZWFycylcIikgKyBcbiAgZ2d0aXRsZShcIkdhcG1pbmRlciBmb3IgMTk5MlwiKSIsInNjdCI6IiNkZXZ0b29sczo6aW5zdGFsbF9naXRodWIoXCJkYXRhY2FtcC90ZXN0d2hhdFwiKVxudGVzdF9saWJyYXJ5X2Z1bmN0aW9uKFwiZ2FwbWluZGVyXCIpXG50ZXN0X2xpYnJhcnlfZnVuY3Rpb24oXCJkcGx5clwiKVxudGVzdF9saWJyYXJ5X2Z1bmN0aW9uKFwiZ2dwbG90MlwiKVxudGVzdF9vYmplY3QoXCJnYXAxOTkyXCIpXG50ZXN0X29yKHtcbiAgIyBtYXRjaCBvcmlnaW5hbCBzb2x1dGlvblxuICBnZ3Bsb3RfZnVuIDwtIGV4KCkgJT4lIGNoZWNrX2Z1bmN0aW9uKFwiZ2dwbG90XCIpXG4gIGdncGxvdF9mdW4gJT4lIGNoZWNrX2FyZyhcImRhdGFcIikgJT4lIGNoZWNrX2VxdWFsKGV2YWwgPSBGQUxTRSlcbiAgZ2dwbG90X2Z1biAlPiUgY2hlY2tfYXJnKFwibWFwcGluZ1wiKVxuICBhZXNfZnVuIDwtIGV4KCkgJT4lIGNoZWNrX2Z1bmN0aW9uKFwiYWVzXCIpXG4gIGFlc19mdW4gJT4lIGNoZWNrX2FyZyhcInhcIikgJT4lIGNoZWNrX2VxdWFsKGV2YWwgPSBGQUxTRSlcbiAgYWVzX2Z1biAlPiUgY2hlY2tfYXJnKFwieVwiKSAlPiUgY2hlY2tfZXF1YWwoZXZhbCA9IEZBTFNFKVxuICBhZXNfZnVuICU+JSBjaGVja19hcmcoXCJjb2xvclwiKSAlPiUgY2hlY2tfZXF1YWwoZXZhbCA9IEZBTFNFKVxuICBhZXNfZnVuICU+JSBjaGVja19hcmcoXCJzaXplXCIpICU+JSBjaGVja19lcXVhbChldmFsID0gRkFMU0UpXG4gIGV4KCkgJT4lIGNoZWNrX2Z1bmN0aW9uKFwiZ2VvbV9wb2ludFwiKVxuICBleCgpICU+JSBjaGVja19mdW5jdGlvbihcInhsYWJcIilcbiAgZXgoKSAlPiUgY2hlY2tfZnVuY3Rpb24oXCJ5bGFiXCIpXG4gIGV4KCkgJT4lIGNoZWNrX2Z1bmN0aW9uKFwiZ2d0aXRsZVwiKVxufSwge1xuICAjIG1hdGNoIGFsdCBzb2x1dGlvbjpcbiAgc29sX2FsdF9jb2RlIDwtICdnZ3Bsb3QoZGF0YSA9IGdhcDE5OTIsXG4gICAgICAgbWFwcGluZyA9IGFlcyh4ID0gbG9nKGdkcFBlcmNhcCwgYmFzZSA9IDEwKSxcbiAgICAgICAgICAgICAgICAgICAgIHkgPSBsaWZlRXhwKSkgK1xuICBnZW9tX3BvaW50KG1hcHBpbmcgPSBhZXMoY29sb3IgPSBjb250aW5lbnQsXG4gICAgICAgICAgICAgICAgICAgICBzaXplID0gcG9wKSkgK1xuICB4bGFiKFwiR3Jvc3MgRG9tZXN0aWMgUHJvZHVjdCAobG9nIHNjYWxlKVwiKSArXG4gIHlsYWIoXCJMaWZlIEV4cGVjdGFuY3kgYXQgYmlydGggKHllYXJzKVwiKSArXG4gIGdndGl0bGUoXCJHYXBtaW5kZXIgZm9yIDE5OTJcIiknXG4gIGFsdF9leCA8LSBleCgpICU+JSBvdmVycmlkZV9zb2x1dGlvbihzb2xfYWx0X2NvZGUpXG5cbiAgZ2dwbG90X2Z1biA8LSBhbHRfZXggJT4lIGNoZWNrX2Z1bmN0aW9uKFwiZ2dwbG90XCIpXG4gIGdncGxvdF9mdW4gJT4lIGNoZWNrX2FyZyhcImRhdGFcIikgJT4lIGNoZWNrX2VxdWFsKGV2YWwgPSBGQUxTRSlcbiAgZ2dwbG90X2Z1biAlPiUgY2hlY2tfYXJnKFwibWFwcGluZ1wiKVxuICBhZXNfZnVuIDwtIGFsdF9leCAlPiUgY2hlY2tfZnVuY3Rpb24oXCJhZXNcIilcbiAgYWVzX2Z1biAlPiUgY2hlY2tfYXJnKFwieFwiKSAlPiUgY2hlY2tfZXF1YWwoZXZhbCA9IEZBTFNFKVxuICBhZXNfZnVuICU+JSBjaGVja19hcmcoXCJ5XCIpICU+JSBjaGVja19lcXVhbChldmFsID0gRkFMU0UpXG4gIGdlb21fcG9pbnRfZnVuIDwtIGFsdF9leCAlPiUgY2hlY2tfZnVuY3Rpb24oXCJnZW9tX3BvaW50XCIpXG4gIGdlb21fcG9pbnRfZnVuICU+JSBjaGVja19hcmcoXCJtYXBwaW5nXCIpXG4gIGFsdF9leCAlPiUgY2hlY2tfZnVuY3Rpb24oXCJhZXNcIiwgaW5kZXggPSAyKSAlPiUgY2hlY2tfYXJnKFwiY29sb3JcIikgJT4lIGNoZWNrX2VxdWFsKGV2YWwgPSBGQUxTRSlcbiAgYWx0X2V4ICU+JSBjaGVja19mdW5jdGlvbihcImFlc1wiLCBpbmRleCA9IDIpICU+JSBjaGVja19hcmcoXCJzaXplXCIpICU+JSBjaGVja19lcXVhbChldmFsID0gRkFMU0UpXG4gIGFsdF9leCAlPiUgY2hlY2tfZnVuY3Rpb24oXCJ4bGFiXCIpXG4gIGFsdF9leCAlPiUgY2hlY2tfZnVuY3Rpb24oXCJ5bGFiXCIpXG4gIGFsdF9leCAlPiUgY2hlY2tfZnVuY3Rpb24oXCJnZ3RpdGxlXCIpXG59KVxuIyBGb3Igc29tZSByZWFzb24sIHRoZSBzdWNjZXNzIG1lc3NhZ2UgaXNuJ3QgYXBwZWFyaW5nP1xuc3VjY2Vzc19tc2coXCJOaWNlISBZb3VyIGNvZGUgcHJvZHVjZXMgdGhlIHBsb3Qgc2hvd24uXCIpXG50ZXN0X2Vycm9yKCkifQ== "],
["2-factors.html", "2 Working with Factors/Categorical Data 2.1 Reviewing Factors 2.2 A Basic Barplot using geom_bar() 2.3 Faceting 2.4 Stacked Bars 2.5 Proportional Barchart 2.6 Dodge those bars! 2.7 Your Task: Bar Charts 2.8 Boxplots 2.9 Violin Plots 2.10 Your task: How heavy are our pets? 2.11 What you learned in this section", " 2 Working with Factors/Categorical Data In this section, we’ll learn some skills about manipulating factor (categorical) data. We’ll do this by making a bar plot and a box plot and progressively making it more complex. 2.1 Reviewing Factors Factors are how R represents categorical data. There are two kinds of factors: factor - used for nominal data (“Ducks”,“Cats”,“Dogs”) ordered- used for ordinal data (“10-30”,“31-40”,“41-60”) We’ll manipulate our barplot and add more information using factors. Here’s the simple dataset we’ll use to investigate how to work with factors in ggplot. For the factor and ordered variables, find the categories for each using levels(). library(tidyverse) load(&quot;data/pets.rda&quot;) pets 2.2 A Basic Barplot using geom_bar() The geom_bar() default is to count the number of values with each factor level. Note that you don’t map to a y-aesthetic here, because the y values are the counts. Given this dataset, we might want to ask how many pets have the same name. What is the most popular name? Try mapping another variable to fill (try both weight and animal). Are the results what you expected? ggplot(data = pets, mapping = aes(x=name)) + geom_bar() 2.3 Faceting Say you have another factor variable and you want to stratify the plots based on that. You can do that by supplying the name of that variable as a facet. Here, we facet our barplot by shotsCurrent. ggplot(data = pets, mapping = aes(x = name)) + geom_bar() + ## have to specify facets using notation ## try out facets=~ageCategory! facet_wrap(facets = ~shotsCurrent) + ## we make the x axis x angled for better legibility theme(axis.text.x = element_text(angle = 45)) You might notice that there are blank spots for the categories in each facet. We can restrict the factors in each by using scale=&quot;free_x&quot; argument in facet_wrap(). How many animals named “Morris” did not receive shots? What happens when you replace the scale argument with “free_y”? ggplot(pets, aes(x = name)) + geom_bar() + facet_wrap(facets = ~shotsCurrent, scale = &quot;free_x&quot;) + theme(axis.text.x = element_text(angle = 45)) 2.4 Stacked Bars Let’s see how many of each animal got shots. We can do this by mapping shotsCurrent to fill. #we map color (the outline of the plot) to black to make it look prettier ggplot(pets, aes(x = animal, fill = shotsCurrent)) + geom_bar(color = &quot;black&quot;) 2.5 Proportional Barchart We may only be interested in the relative proportions between the different categories. Visualizing this is useful for various 2 x 2 tests on proportions. What percent of dogs did not receive shots? ggplot(pets, aes(x = animal, fill = shotsCurrent)) + geom_bar(position = &quot;fill&quot;, color = &quot;black&quot;) 2.6 Dodge those bars! Instead of stacking, we can also dodge the bars (move the bars so they’re beside each other). ggplot(pets, aes(x = animal, fill = shotsCurrent)) + geom_bar(position = &quot;dodge&quot;, color = &quot;black&quot;) 2.7 Your Task: Bar Charts Given the pets data.frame, plot a stacked proportional barchart that shows the age category counts by animal type. Is the proportion of animals receiving shots the same across each age category? Hints: think about what to map to x, and what to map to fill. eyJsYW5ndWFnZSI6InIiLCJwcmVfZXhlcmNpc2VfY29kZSI6InBldHMgPC0gZGF0YS5mcmFtZShpZCA9IGMoJ0MxJywnQzInLCdEMScsJ0Q0JywnRDgnLCAnQzQnLCAnRDUnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICdDMTAnLCBcIkc0XCIsIFwiQzExXCIsIFwiRDlcIiwgXCJDNlwiKSxcbiAgICAgICAgICAgICAgICAgICBuYW1lID0gZmFjdG9yKGMoXCJNb3JyaXNcIiwgXCJNb3JyaXNcIiwgXCJGaWRvXCIsIFwiTXIgQm93c2VyXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWRvXCIsIFwiTGFkeSBTaGViYVwiLCBcIkh1YmVydFwiLCBcIkFwcGxlc1wiLCBcIk5pYmJsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9ycmlzXCIsIFwiV2lua3lcIiwgXCJGaWRvXCIpKSxcbiAgICAgICAgICAgICAgICAgICAjI3dlaWdodCBpcyBpbiBwb3VuZHNcbiAgICAgICAgICAgICAgICAgICB3ZWlnaHQgPSBjKDYsIDcsIDE1LCAyMCwgNDAsIDEwLCA2MCwgMTcsIDAuMiwgMTAsIDExLCA2KSxcbiAgICAgICAgICAgICAgICAgICBhbmltYWwgPSBmYWN0b3IoYyhcImNhdFwiLCBcImNhdFwiLCBcImRvZ1wiLCBcImRvZ1wiLCBcImRvZ1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjYXRcIiwgXCJkb2dcIiwgXCJjYXRcIiwgXCJnZXJiaWxcIiwgXCJjYXRcIiwgXCJkb2dcIiwgXCJjYXRcIikpLFxuICAgICAgICAgICAgICAgICAgICMjYmVjYXVzZSBpdCdzIGFuIG9yZGVyZWQgY2F0ZWdvcnksIHdlIGhhdmUgdG8gc3BlY2lmeSBcbiAgICAgICAgICAgICAgICAgICAjI29yZGVyIGFzIHRoZSBsZXZlbHMgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICBhZ2VDYXRlZ29yeSA9IG9yZGVyZWQoYyhcIjAtMlwiLCBcIjUtOFwiLCBcIjUtOFwiLCBcIjMtNFwiLCBcIjMtNFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiNS04XCIsIFwiMC0yXCIsIFwiNS04XCIsIFwiMC0yXCIsXCI1LThcIiwgXCIzLTRcIiwgXCI1LThcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVscyA9IGMoXCIwLTJcIiwgXCIzLTRcIiwgXCI1LThcIikpLFxuICAgICAgICAgICAgICAgICAgIHNob3RzQ3VycmVudCA9IGMoXCJOb1wiLCBcIlllc1wiLCBcIk5vXCIsIFwiTm9cIiwgXCJZZXNcIiwgXCJOb1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk5vXCIsIFwiWWVzXCIsIE5BLCBcIk5vXCIsIFwiTm9cIiwgXCJZZXNcIikpIiwic2FtcGxlIjoibGlicmFyeShnZ3Bsb3QyKVxuXG4jU3BhY2UgZm9yIHlvdXIgYW5zd2VyIGhlcmUuIiwic29sdXRpb24iOiJsaWJyYXJ5KGdncGxvdDIpXG5nZ3Bsb3QoZGF0YSA9IHBldHMsIFxuICAgICAgIG1hcHBpbmcgPSBhZXMoeCA9IGFnZUNhdGVnb3J5LCBmaWxsID0gYW5pbWFsKSkgK1xuICBnZW9tX2Jhcihwb3NpdGlvbiA9IFwiZmlsbFwiKSIsInNjdCI6InRlc3RfbGlicmFyeV9mdW5jdGlvbihcImdncGxvdDJcIilcbnRlc3RfZ2dwbG90KGNoZWNrX2RhdGEgPSBUUlVFLCBjaGVja19hZXMgPSBUUlVFLCBjaGVja19nZW9tID0gVFJVRSlcbnN1Y2Nlc3NfbXNnKFwiTmljZSFcIilcbnRlc3RfZXJyb3IoKSJ9 Intermediate Folks: facet this plot by shotsCurrent using facet_wrap. eyJsYW5ndWFnZSI6InIiLCJwcmVfZXhlcmNpc2VfY29kZSI6InBldHMgPC0gZGF0YS5mcmFtZShpZCA9IGMoJ0MxJywnQzInLCdEMScsJ0Q0JywnRDgnLCAnQzQnLCAnRDUnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICdDMTAnLCBcIkc0XCIsIFwiQzExXCIsIFwiRDlcIiwgXCJDNlwiKSxcbiAgICAgICAgICAgICAgICAgICBuYW1lID0gZmFjdG9yKGMoXCJNb3JyaXNcIiwgXCJNb3JyaXNcIiwgXCJGaWRvXCIsIFwiTXIgQm93c2VyXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWRvXCIsIFwiTGFkeSBTaGViYVwiLCBcIkh1YmVydFwiLCBcIkFwcGxlc1wiLCBcIk5pYmJsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9ycmlzXCIsIFwiV2lua3lcIiwgXCJGaWRvXCIpKSxcbiAgICAgICAgICAgICAgICAgICAjI3dlaWdodCBpcyBpbiBwb3VuZHNcbiAgICAgICAgICAgICAgICAgICB3ZWlnaHQgPSBjKDYsIDcsIDE1LCAyMCwgNDAsIDEwLCA2MCwgMTcsIDAuMiwgMTAsIDExLCA2KSxcbiAgICAgICAgICAgICAgICAgICBhbmltYWwgPSBmYWN0b3IoYyhcImNhdFwiLCBcImNhdFwiLCBcImRvZ1wiLCBcImRvZ1wiLCBcImRvZ1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjYXRcIiwgXCJkb2dcIiwgXCJjYXRcIiwgXCJnZXJiaWxcIiwgXCJjYXRcIiwgXCJkb2dcIiwgXCJjYXRcIikpLFxuICAgICAgICAgICAgICAgICAgICMjYmVjYXVzZSBpdCdzIGFuIG9yZGVyZWQgY2F0ZWdvcnksIHdlIGhhdmUgdG8gc3BlY2lmeSBcbiAgICAgICAgICAgICAgICAgICAjI29yZGVyIGFzIHRoZSBsZXZlbHMgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICBhZ2VDYXRlZ29yeSA9IG9yZGVyZWQoYyhcIjAtMlwiLCBcIjUtOFwiLCBcIjUtOFwiLCBcIjMtNFwiLCBcIjMtNFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiNS04XCIsIFwiMC0yXCIsIFwiNS04XCIsIFwiMC0yXCIsXCI1LThcIiwgXCIzLTRcIiwgXCI1LThcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVscyA9IGMoXCIwLTJcIiwgXCIzLTRcIiwgXCI1LThcIikpLFxuICAgICAgICAgICAgICAgICAgIHNob3RzQ3VycmVudCA9IGMoXCJOb1wiLCBcIlllc1wiLCBcIk5vXCIsIFwiTm9cIiwgXCJZZXNcIiwgXCJOb1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk5vXCIsIFwiWWVzXCIsIE5BLCBcIk5vXCIsIFwiTm9cIiwgXCJZZXNcIikpIiwic2FtcGxlIjoibGlicmFyeShnZ3Bsb3QyKVxuXG4jU3BhY2UgZm9yIHlvdXIgYW5zd2VyIGhlcmUuIiwic29sdXRpb24iOiJsaWJyYXJ5KGdncGxvdDIpXG5nZ3Bsb3QoZGF0YSA9IHBldHMsIFxuICAgICAgIG1hcHBpbmcgPSBhZXMoeCA9IGFnZUNhdGVnb3J5LCBmaWxsID0gYW5pbWFsKSkgK1xuICBnZW9tX2Jhcihwb3NpdGlvbiA9IFwiZmlsbFwiKSArXG4gIGZhY2V0X3dyYXAoZmFjZXRzID0gfnNob3RzQ3VycmVudCkiLCJzY3QiOiJ0ZXN0X2xpYnJhcnlfZnVuY3Rpb24oXCJnZ3Bsb3QyXCIpXG50ZXN0X2dncGxvdChjaGVja19kYXRhID0gVFJVRSwgY2hlY2tfZmFjZXQgPSBUUlVFLCBjaGVja19hZXMgPSBUUlVFLCBcbiAgICAgICAgICAgIGZhY2V0X2ZhaWxfbXNnID0gXCJZb3UgZGlkbid0IG1hcCB0aGUgY29ycmVjdCBmYWNldC4gVHJ5IGFnYWluLlwiLCBcbiAgICAgICAgICAgIGFlc19mYWlsX21zZyA9IFwiTm90IHRoZSBjb3JyZWN0IGZpbGwgYWVzdGhldGljLiBUcnkgYWdhaW4uXCIpXG5zdWNjZXNzX21zZyhcIk5pY2UhXCIpXG50ZXN0X2Vycm9yKCkifQ== 2.8 Boxplots Boxplots allow us to assess distributions of a continuous variable conditioned on categorical variables. What does this tell us? ggplot(pets, aes(x = shotsCurrent, y = weight)) + geom_boxplot() 2.9 Violin Plots Violin plots are another useful way to visualize the data. They provide a more nuanced look at the data. They’re a density plot that’s mirrored around the y-axis. ggplot(pets, aes(x = ageCategory, y = weight, fill = ageCategory)) + geom_violin() 2.10 Your task: How heavy are our pets? Visualize weight by animal type as both a boxplot and a violin plot on the same plot. What do you conclude? Which kind of animal weighs more on average than the other? eyJsYW5ndWFnZSI6InIiLCJwcmVfZXhlcmNpc2VfY29kZSI6InBldHMgPC0gZGF0YS5mcmFtZShpZCA9IGMoJ0MxJywnQzInLCdEMScsJ0Q0JywnRDgnLCAnQzQnLCAnRDUnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICdDMTAnLCBcIkc0XCIsIFwiQzExXCIsIFwiRDlcIiwgXCJDNlwiKSxcbiAgICAgICAgICAgICAgICAgICBuYW1lID0gZmFjdG9yKGMoXCJNb3JyaXNcIiwgXCJNb3JyaXNcIiwgXCJGaWRvXCIsIFwiTXIgQm93c2VyXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWRvXCIsIFwiTGFkeSBTaGViYVwiLCBcIkh1YmVydFwiLCBcIkFwcGxlc1wiLCBcIk5pYmJsZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9ycmlzXCIsIFwiV2lua3lcIiwgXCJGaWRvXCIpKSxcbiAgICAgICAgICAgICAgICAgICAjI3dlaWdodCBpcyBpbiBwb3VuZHNcbiAgICAgICAgICAgICAgICAgICB3ZWlnaHQgPSBjKDYsIDcsIDE1LCAyMCwgNDAsIDEwLCA2MCwgMTcsIDAuMiwgMTAsIDExLCA2KSxcbiAgICAgICAgICAgICAgICAgICBhbmltYWwgPSBmYWN0b3IoYyhcImNhdFwiLCBcImNhdFwiLCBcImRvZ1wiLCBcImRvZ1wiLCBcImRvZ1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjYXRcIiwgXCJkb2dcIiwgXCJjYXRcIiwgXCJnZXJiaWxcIiwgXCJjYXRcIiwgXCJkb2dcIiwgXCJjYXRcIikpLFxuICAgICAgICAgICAgICAgICAgICMjYmVjYXVzZSBpdCdzIGFuIG9yZGVyZWQgY2F0ZWdvcnksIHdlIGhhdmUgdG8gc3BlY2lmeSBcbiAgICAgICAgICAgICAgICAgICAjI29yZGVyIGFzIHRoZSBsZXZlbHMgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICBhZ2VDYXRlZ29yeSA9IG9yZGVyZWQoYyhcIjAtMlwiLCBcIjUtOFwiLCBcIjUtOFwiLCBcIjMtNFwiLCBcIjMtNFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiNS04XCIsIFwiMC0yXCIsIFwiNS04XCIsIFwiMC0yXCIsXCI1LThcIiwgXCIzLTRcIiwgXCI1LThcIiksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVscyA9IGMoXCIwLTJcIiwgXCIzLTRcIiwgXCI1LThcIikpLFxuICAgICAgICAgICAgICAgICAgIHNob3RzQ3VycmVudCA9IGMoXCJOb1wiLCBcIlllc1wiLCBcIk5vXCIsIFwiTm9cIiwgXCJZZXNcIiwgXCJOb1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk5vXCIsIFwiWWVzXCIsIE5BLCBcIk5vXCIsIFwiTm9cIiwgXCJZZXNcIikpIiwic2FtcGxlIjoibGlicmFyeShnZ3Bsb3QyKSIsInNvbHV0aW9uIjoibGlicmFyeShnZ3Bsb3QyKVxuZ2dwbG90KGRhdGEgPSBwZXRzLCBtYXBwaW5nID0gYWVzKHggPSBhbmltYWwsIHkgPSB3ZWlnaHQpKSArXG4gIGdlb21fYm94cGxvdCgpICsgXG4gIGdlb21fdmlvbGluKCkiLCJzY3QiOiJ0ZXN0X2xpYnJhcnlfZnVuY3Rpb24oXCJnZ3Bsb3QyXCIpXG50ZXN0X2dncGxvdChjaGVja19hZXMgPSBUUlVFLCBhZXNfZmFpbF9tc2cgPSBcIk5vdCBxdWl0ZS4gQ2hlY2sgeW91ciBtYXBwaW5nXCIpXG50ZXN0X2Z1bmN0aW9uKFwiZ2VvbV9ib3hwbG90XCIsIGluY29ycmVjdF9tc2cgPSBcIkkgdGhpbmsgeW91J3JlIG1pc3NpbmcgYSBnZW9tIGhlcmUuXCIpXG50ZXN0X2Z1bmN0aW9uKFwiZ2VvbV92aW9saW5cIiwgaW5jb3JyZWN0X21zZyA9IFwiSSB0aGluayB5b3UncmUgbWlzc2luZyBhIGdlb20uXCIpXG5zdWNjZXNzX21zZyhcIkdyZWF0ISBZb3UgY2FuIHNlZSB0aGF0IHRoZSBib3hwbG90IGFuZCB0aGUgdmlvbGluIHBsb3QgY29udHJpYnV0ZSBkaWZmZXJlbnQgbGV2ZWxzIG9mIGRldGFpbCB0byB0aGUgZ3JhcGhcIikifQ== 2.11 What you learned in this section Visualizing factor data Simple, stacked, stacked proportional, and dodged barplots Faceting a graph Boxplots and violin plots "],
["3-dplyr.html", "3 Intro to dplyr 3.1 The pipe %&gt;% 3.2 The Five Main Verbs (5MV) of data wrangling 3.3 mutate() 3.4 mutate() 3.5 arrange() 3.6 Other useful dplyr verbs 3.7 Your Task 3.8 Your Tasks (Challenge) 3.9 Your Task", " 3 Intro to dplyr In this section, we’ll discuss Data Wrangling/Transformation via the dplyr package. We’ll explore ways to choose subsets of data, aggregate data to create summaries, make new variables, and sort your data frames. It is recommended you also explore the RStudio Cheatsheet on Data Transformation as we discuss this content. Back to gapminder Here is a look at the gapminder data frame in the gapminder package. library(gapminder) gapminder Say we wanted mean life expectancy across all years for Asia # Base R asia &lt;- gapminder[gapminder$continent == &quot;Asia&quot;, ] mean(asia$lifeExp) [1] 60.0649 library(dplyr) gapminder %&gt;% filter(continent == &quot;Asia&quot;) %&gt;% summarize(mean_exp = mean(lifeExp)) 3.1 The pipe %&gt;% A way to chain together commands It is essentially the dplyr equivalent to the + in ggplot2 3.2 The Five Main Verbs (5MV) of data wrangling filter() summarize() group_by() mutate() arrange() {-} 3.2.1 filter() Select a subset of the rows of a data frame. The arguments are the “filters” that you’d like to apply. library(gapminder); library(dplyr) gap_2007 &lt;- gapminder %&gt;% filter(year == 2007) gap_2007 Use == to compare a variable to a value 3.2.2 Logical operators Use | to check for any in multiple filters being true: gapminder %&gt;% filter(year == 2002 | continent == &quot;Europe&quot;) Use &amp; or , to check for all of multiple filters being true: gapminder %&gt;% filter(year == 2002, continent == &quot;Europe&quot;) Use %in% to check for any being true (shortcut to using | repeatedly with ==) gapminder %&gt;% filter(country %in% c(&quot;Argentina&quot;, &quot;Belgium&quot;, &quot;Mexico&quot;), year %in% c(1987, 1992)) 3.2.3 summarize() Any numerical summary that you want to apply to a column of a data frame is specified within summarize(). max_exp_1997 &lt;- gapminder %&gt;% filter(year == 1997) %&gt;% summarize(max_exp = max(lifeExp)) max_exp_1997 3.2.4 Combining summarize() with group_by() When you’d like to determine a numerical summary for all levels of a different categorical variable max_exp_1997_by_cont &lt;- gapminder %&gt;% filter(year == 1997) %&gt;% group_by(continent) %&gt;% summarize(max_exp = max(lifeExp)) max_exp_1997_by_cont 3.2.5 Without the %&gt;% It’s hard to appreciate the %&gt;% without seeing what the code would look like without it: max_exp_1997_by_cont &lt;- summarize( group_by( filter( gapminder, year == 1997), continent), max_exp = max(lifeExp)) max_exp_1997_by_cont 3.3 mutate() Allows you to create a new variable based on other variables OR change the contents of an existing variable create a new variable based on other variables gap_w_gdp &lt;- gapminder %&gt;% mutate(gdp = pop * gdpPercap) gap_w_gdp 3.4 mutate() change the contents of an existing variable gap_weird &lt;- gapminder %&gt;% mutate(pop = pop + 1000) gap_weird 3.5 arrange() Reorders the rows in a data frame based on the values of one or more variables gapminder %&gt;% arrange(year, country) Can also put into descending order gapminder %&gt;% filter(year &gt; 2000) %&gt;% arrange(desc(lifeExp)) 3.6 Other useful dplyr verbs select top_n sample_n slice glimpse rename 3.7 Your Task Determine which African country had the highest GDP per capita in 1982 using the gapminder data in the gapminder package. Store your answer as one row including all six of the variables in gapminder. Give the name of top_africa to this resulting data 1 x 6 data frame. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJsaWJyYXJ5KGdhcG1pbmRlcilcbmxpYnJhcnkoZHBseXIpIiwic29sdXRpb24iOiJsaWJyYXJ5KGdhcG1pbmRlcilcbmxpYnJhcnkoZHBseXIpXG50b3BfYWZyaWNhIDwtIGdhcG1pbmRlciAlPiVcbiAgZmlsdGVyKHllYXIgPT0gMTk4MikgJT4lXG4gIGZpbHRlcihjb250aW5lbnQgPT0gXCJBZnJpY2FcIikgJT4lXG4gIGZpbHRlcihnZHBQZXJjYXAgPT0gbWF4KGdkcFBlcmNhcCkpIiwic2N0IjoidGVzdF9saWJyYXJ5X2Z1bmN0aW9uKFwiZ2FwbWluZGVyXCIpXG50ZXN0X2xpYnJhcnlfZnVuY3Rpb24oXCJkcGx5clwiKVxudGVzdF9vYmplY3QoXCJ0b3BfYWZyaWNhXCIpXG50ZXN0X2Vycm9yKCkifQ== – 3.8 Your Tasks (Challenge) For both of these problems below, use the bechdel data frame in the fivethirtyeight package: Use the count function in the dplyr package to determine how many movies in 2013 fell into each of the different categories for clean_test eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjU3BhY2UgZm9yIHlvdXIgYW5zd2VyIGhlcmUuIn0= Determine the percentage of movies that received the value of &quot;ok&quot; across all years eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjU3BhY2UgZm9yIHlvdXIgYW5zd2VyIGhlcmUuIn0= 3.9 Your Task Determine the top five movies in terms of domestic return on investment for 2013 scaled data using the bechdel data frame in the fivethirtyeight package. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjU3BhY2UgZm9yIHlvdXIgYW5zd2VyIGhlcmUuIn0= "],
["4-tidy.html", "4 Tidy Data: Why and How 4.1 What is Tidy Data? 4.2 Why Tidy Data? 4.3 Beware of columns masquerading as variables! 4.4 Making data tidy: gather() 4.5 Your Task: using tidy data 4.6 Making one column into many: spread() 4.7 Your Task - Who is the most democratic? 4.8 Challenge - if that was too easy… 4.9 Make it look like this: 4.10 Some Hints on the Challenge", " 4 Tidy Data: Why and How 4.1 What is Tidy Data? each row corresponds to an observation each variable is a column each type of observation is in a different table 4.2 Why Tidy Data? Tidy data enables us to do lots of things! Great ggplots Summarize/slice the data in multiple ways Enable Exploratory Data Analysis Ensure assumptions are met for methods Enable Confirmatory Data Analysis 4.3 Beware of columns masquerading as variables! These columns are actually categories! Ask yourself: do these columns go together as a single observation for your analysis? Also ask yourself: What is the unit of observation? library(tidyr) fertilityData &lt;- read.csv(&quot;data/total_fertility.csv&quot;, check.names = FALSE) fertilityData[1:10, 1:10] 4.4 Making data tidy: gather() Use gather() when you need to make a bunch of columns into one column. library(tidyr) fertilityData &lt;- read.csv(&quot;data/total_fertility.csv&quot;, check.names = FALSE) #gather() takes three arguments: data, key, and value #key is what you want your new categorical column to be named #value is for the actual values in the columns #We don&#39;t want the `Total fertility rate` column to be included as part of the #gather() operation, so we use the `-` notation to exclude it. fertilityDataTidy &lt;- gather(fertilityData, &quot;Year&quot;, &quot;fertilityRate&quot;, -`Total fertility rate`) %&gt;% select(Country = `Total fertility rate`, Year, fertilityRate) %&gt;% #remove na values (there are countries that have no information) filter(!is.na(fertilityRate)) fertilityDataTidy[1:10,] 4.5 Your Task: using tidy data How would we find the average fertility within a year? How about from 1860 on? 4.6 Making one column into many: spread() Sometimes, you will need to go the other direction: take a long format dataset and make it into a more matrix-like format. This is necessary for such functions such as heatmap(). Let’s change things around and make the Country column into the variables (columns) in the dataset. fertilityCountryColumns &lt;- fertilityDataTidy %&gt;% #spread takes a key (Country) and value (fertilityRate) argument spread(Country, fertilityRate) fertilityCountryColumns[1:10, 1:10] 4.7 Your Task - Who is the most democratic? Load the dem_score.csv dataset in the data/ folder. Tidy it up. Which countries had the highest democracy score in 2007? Hint: you’ll have to use your dplyr skills as well. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjZW50ZXIgeW91ciBhbnN3ZXIgaGVyZVxuXG5kZW1TY29yZSA8LSByZWFkLmNzdihcImRhdGEvZGVtX3Njb3JlLmNzdlwiKSJ9 4.8 Challenge - if that was too easy… Take a look at the who dataset (it’s built into tidyverse) data(who) who 4.9 Make it look like this: load(&quot;data/who_tidy.rda&quot;) who_tidy 4.10 Some Hints on the Challenge Look at the documentation for separate(). You will first have to gather a bunch of the columns into a single column. Then you will have to apply separate() twice, with different parameters. What does each column mean? Here’s some info from the data dictionary: The first three letters of entries in the key column correspond to new or old cases of TB. The next two letters (after the _) correspond to TB type: rel for relapse, ep for extrapulmonary TB sn for smear negative, sp for smear positive The next letter after the second _ corresponds to the sex of the TB patient. The remaining numbers correspond to age group: 014 for 0 to 14 years 65 for 65 or older etc. "],
["5-factors2.html", "5 More on Factors 5.1 More on manipulating factors 5.2 Let’s build a bar plot of weights 5.3 Sort by another variable (intermediate) 5.4 Plot in Reverse Alphabetical Order 5.5 Sort by frequency 5.6 Recode levels of a factor 5.7 Group levels of a factor together", " 5 More on Factors 5.1 More on manipulating factors The following section is optional. Intermediate users may find these helpful. You should probably go on to Part 3 and learn some dplyr basics before starting with these, since we use mutate(), and it’s important to understand what it’s doing. You’ll need to load the forcats package to use these. It’s included with the tidyverse, but is not loaded by default. library(tidyverse) library(forcats) #load the pets data again load(&quot;data/pets.rda&quot;) 5.2 Let’s build a bar plot of weights To start out, let’s plot the weight for each pet as a bar graph. ggplot(data = pets, aes(x = id, y = weight)) + geom_bar(stat = &quot;identity&quot;) 5.3 Sort by another variable (intermediate) Let’s sort the barplot by weight. We can do this by adding a fct_reorder() expression to define a new variable id2 whose categories are ordered by weight. Based on this visualization, what can we conclude about the weights of each type of animal? Which kind of animal weighs the most? pets %&gt;% mutate(id = fct_reorder(id, weight)) %&gt;% ggplot(aes(x = id, y = weight)) + geom_bar(stat = &quot;identity&quot;) 5.4 Plot in Reverse Alphabetical Order Often, you want to plot things in reverse alphametical order. This is useful because heatmaps and such are often plotted from the bottom. You can use fct_rev to do this. library(forcats) pets %&gt;% mutate(id = fct_rev(id)) %&gt;% ggplot(aes(x = id, y = weight)) + geom_bar(stat = &quot;identity&quot;) 5.5 Sort by frequency Going back to our pets data, sometimes we want to sort our count data by frequency. We can use fct_infreq() to do that. How would we plot these in ascending order? pets %&gt;% mutate(name = fct_infreq(name)) %&gt;% ggplot(aes(x = name)) + geom_bar() 5.6 Recode levels of a factor Sometimes we want to rename the levels of a factor. Often the data may have obscure categories (such as abbreviations), and we want to be clear in our visualization. As a silly example, let’s change the names of the levels to the latin genus names for each animal. Note we didn’t change the name of gerbil. What is the result? pets %&gt;% mutate(genus = fct_recode(animal, canis = &quot;dog&quot;, felis = &quot;cat&quot;)) %&gt;% ggplot(aes(x = genus)) + geom_bar() 5.7 Group levels of a factor together Sometimes, your categories are too granular. It might make sense to aggregate some categories together. You can use fct_collapse() to do this. pets %&gt;% mutate(alphabet = fct_collapse(name, A = c(&quot;Apples&quot;), F = c(&quot;Fido&quot;), M = c(&quot;Morris&quot;, &quot;Mr Bowser&quot;), L = c(&quot;Lady Sheba&quot;), H = c(&quot;Hubert&quot;), W = c(&quot;Winky&quot;)) ) %&gt;% ggplot(aes(x = alphabet)) + geom_bar() 5.7.1 forcats does way more! Reference page: http://forcats.tidyverse.org/ "],
["6-conclusion.html", "6 What’s Next? 6.1 Keep in Touch! 6.2 Give us Feedback!", " 6 What’s Next? We’ve showed you the bare basics of the tidyverse. There’s a ton more! Where to go next? http://tidyverse.org lubridate for dealing with dates stringr for manipulating strings haven/readr/readxl for importing data Modern Dive (by Chester and Albert Kim): http://moderndive.com R for Data Science: http://r4ds.had.co.nz Variety of courses on DataCamp 6.1 Keep in Touch! Ted: @tladeras https://laderast.github.io Chester: @old_man_chester https://ismayc.github.io 6.2 Give us Feedback! Let us know what you thought of the workshop/book! Was it too easy? Too hard? What else would you like to see? Add Feedback here "]
]
